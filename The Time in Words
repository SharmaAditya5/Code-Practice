#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

/*
 * Complete the 'timeInWords' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts following parameters:
 *  1. INTEGER h
 *  2. INTEGER m
 */


string timeInWords(int h, int m) {
    // Map of hours
    std::map<int, string> hours {
        {1, "one"}, {2, "two"}, {3, "three"}, {4, "four"}, {5, "five"}, {6, "six"},
        {7, "seven"}, {8, "eight"}, {9, "nine"}, {10, "ten"}, {11, "eleven"}, {12, "twelve"}
    };

    // Map of minutes
    std::map<int, string> minutes {
        {0, "o' clock"}, {1, "one minute"}, {2, "two minutes"}, {3, "three minutes"}, {4, "four minutes"}, {5, "five minutes"},
        {6, "six minutes"}, {7, "seven minutes"}, {8, "eight minutes"}, {9, "nine minutes"}, {10, "ten minutes"}, {11, "eleven minutes"},
        {12, "twelve minutes"}, {13, "thirteen minutes"}, {14, "fourteen minutes"}, {15, "quarter"}, {16, "sixteen minutes"},
        {17, "seventeen minutes"}, {18, "eighteen minutes"}, {19, "nineteen minutes"}, {20, "twenty minutes"}, {21, "twenty one minutes"},
        {22, "twenty two minutes"}, {23, "twenty three minutes"}, {24, "twenty four minutes"}, {25, "twenty five minutes"},
        {26, "twenty six minutes"}, {27, "twenty seven minutes"}, {28, "twenty eight minutes"}, {29, "twenty nine minutes"},
        {30, "half"}
    };

    
    string indicator = " past ";
    if(m == 0) return hours[h] + " o' clock";
    if( m > 30){
        indicator = " to ";
        m = 60 - m;
        h += 1;
    }
    return minutes[m] + indicator + hours[h];
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string h_temp;
    getline(cin, h_temp);

    int h = stoi(ltrim(rtrim(h_temp)));

    string m_temp;
    getline(cin, m_temp);

    int m = stoi(ltrim(rtrim(m_temp)));

    string result = timeInWords(h, m);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
